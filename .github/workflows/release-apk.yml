name: Android Release APK

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version_name: ${{ steps.version.outputs.version_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set Up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3


      - name: Decode Keystore
        id: decode_keystore
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'app/keys.jks'
          encodedString: ${{ secrets.KEYSTORE }}




      - name: Create gradle.properties with signing info
        run: |
            mkdir -p ~/.gradle
            cat <<EOF >> ~/.gradle/gradle.properties
            storeFile=key.jks
            storePassword=${{ secrets.KEYSTORE_PASSWORD }}
            keyAlias=${{ secrets.KEY_ALIAS }}
            keyPassword=${{ secrets.KEY_PASSWORD }}
            EOF


      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Extract Version from Gradle (KTS)
        id: version
        run: |
          VERSION_NAME=$(grep 'versionName =' app/build.gradle.kts | sed 's/.*"\(.*\)".*/\1/')
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION_NAME"

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Upload Release APK to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-v${{ steps.version.outputs.version_name }}
          path: app/build/outputs/apk/release/app-release.apk
          retention-days: 30

      - name: Clean up keystore
        if: always()
        run: |
          rm -f key.jks
          rm -f signing.properties

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only create releases from main branch

    steps:
      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-apk-v${{ needs.build.outputs.version_name }}
          path: .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version_name }}
          name: Release v${{ needs.build.outputs.version_name }}
          files: app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
